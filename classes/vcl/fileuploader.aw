<?php

class fileuploader extends aw_template implements vcl_interface
{
	private $fileuploader_dir = "AW_fileuploader/";
	private $upload_dir = "files/";
	public $tmp_dir = "tmp/";
	private $fileupload_data_ref = "aw_fileuploader_data";

	public function __construct()
	{
		$this->init(array(
			"tpldir" => "vcl/fileuploader"
		));

		load_javascript("jquery/plugins/uploadify/jquery.uploadify.v2.1.4.min.js");
		load_javascript("swfobject.js");
		lc_site_load("fileuploader", $this);

		$sys_tmp = sys_get_temp_dir();
		if ("win32" === aw_ini_get("server.platform"))
		{
			$sys_tmp = str_replace("\\", "/", $sys_tmp);
		}

		$sys_tmp .= "/".$this->fileuploader_dir;
		if (!is_dir($sys_tmp))
		{
			mkdir($sys_tmp, 0744);
		}

		$upload_dir = $sys_tmp . $this->upload_dir;
		if (!is_dir($upload_dir))
		{
			mkdir($upload_dir, 0744);
		}
		$this->upload_dir = $upload_dir;

		$tmp_dir = $sys_tmp . $this->tmp_dir;
		if (!is_dir($tmp_dir))
		{
			mkdir($tmp_dir, 0744);
		}
		$this->tmp_dir = $tmp_dir;
	}

	/**
		@attrib api=1 params=name
		@param name type=string
			Component identifier
		@param fileupload_requester_class type=string
			Component requester class
		@param fileupload_data_ref type=string
			Variable name that will contain uploaded files data
		@param directory type=string default=
			Folder where uploaded file is saved, default is under current site files folder autogenerated path
		@comment
		@returns string
			File uploader component
		@errors
	**/
	public function create($arr)
	{
		$fileupload_data_ref = !empty($arr["fileupload_data_ref"]) ? $arr["fileupload_data_ref"] : $this->fileupload_data_ref;
		$upload_handler = "/automatweb/orb.aw";
		$params = array(
			"class" => "fileuploader",
			"action" => "process_upload",
			"fileupload_data_ref" => $fileupload_data_ref,
			"prop_class" => $arr["fileupload_requester_class"],
			"prop_name" => $arr["name"]
		);

		$this->read_template("default.tpl");
		$this->vars(array(
			"name" => $arr["name"],
			"params" => json_encode($params),
			"fileupload_data_ref" => $fileupload_data_ref,
			"upload_handler" => $upload_handler
		));
		$fileuploader = $this->parse();
		return $fileuploader;
	}

	public function init_vcl_property($arr)
	{
		$prop = $arr["property"];
		$name = $prop["name"];
		$prop["fileupload_requester_class"] = $arr["request"]["class"];
		$prop["value"] = $this->create($prop) . html::linebreak() . $arr["obj_inst"]->prop($prop["name"]);
		return array($name => $prop);
	}

	public function process_vcl_property(&$arr)
	{
	}

	/**
		@attrib name=process_upload all_args=1 nologin=1
		@comment
		@returns
		@errors
	**/
	public function process_upload($arr)
	{
		if (empty($arr["prop_class"]) or !aw_ini_isset("class_lut.".$arr["prop_class"]) or empty($arr["prop_name"]) or empty($_FILES))
		{
			exit;
		}

		$fileupload_data_ref = !empty($arr["fileupload_data_ref"]) ? $arr["fileupload_data_ref"] : $this->fileupload_data_ref;
		$tmp_file = $_FILES[$fileupload_data_ref]['tmp_name'];
		$target_file_name = $_FILES[$fileupload_data_ref]['name'];
		$target_file = $this->tmp_dir . $target_file_name;
		move_uploaded_file($tmp_file, $target_file);
		exit($target_file_name);
	}
}
