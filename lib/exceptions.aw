<?php

/** Generic automatweb exception **/
class aw_exception extends Exception
{
	protected $forwarded_exceptions = array();

	public function set_forwarded_exception(Exception $e)
	{
		$this->forwarded_exceptions[] = $e;
	}

	public function get_forwarded_exceptions()
	{
		return $this->forwarded_exceptions;
	}
}

/////////////////// general purpose classes for common exception conditions ///////////////////
/** Indicates that instruction has already been carried out **/
class awex_redundant_instruction extends aw_exception {}

/** Function or method parameter error **/
class awex_param extends aw_exception
{
	public $param_name;

	public function set($param_name)
	{
		$this->param_name = $param_name;
		return $this;
	}
}

/** Function or method parameter type mismatch/error **/
class awex_param_type extends awex_param
{
	public $given_value;

	public function set($param_name, $given_value)
	{
		parent::set($param_name);
		$this->given_value = $given_value;
		return $this;
	}
}



/////////////////// PHP error exceptions ///////////////////
/** PHP error exception **/
class awex_php_generic_error extends aw_exception
{
	public $errfile;
	public $errline;
	public $context;
}

class awex_php_nonfatal extends awex_php_generic_error {}
class awex_php_fatal extends awex_php_generic_error {}

class awex_php_strict extends awex_php_nonfatal {}
class awex_php_notice extends awex_php_nonfatal {}
class awex_php_warning extends awex_php_nonfatal {}
class awex_php_core_warning extends awex_php_nonfatal {}
class awex_php_user_warning extends awex_php_nonfatal {}
class awex_php_user_notice extends awex_php_nonfatal {}
class awex_php_compile_warning extends awex_php_nonfatal {}

class awex_php_parse extends awex_php_fatal {}
class awex_php_error extends awex_php_fatal {}
class awex_php_core_error extends awex_php_fatal {}
class awex_php_user_error extends awex_php_fatal {}

/*
1 E_ERROR (integer)  Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.
2 E_WARNING (integer)  Run-time warnings (non-fatal errors). Execution of the script is not halted.
4 E_PARSE (integer)  Compile-time parse errors. Parse errors should only be generated by the parser.
8 E_NOTICE (integer)  Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.
16 E_CORE_ERROR (integer)  Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP.  since PHP 4
32 E_CORE_WARNING (integer)  Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP.  since PHP 4
64 E_COMPILE_ERROR (integer)  Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.  since PHP 4
128 E_COMPILE_WARNING (integer)  Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.  since PHP 4
256 E_USER_ERROR (integer)  User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().  since PHP 4
512 E_USER_WARNING (integer)  User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().  since PHP 4
1024 E_USER_NOTICE (integer)  User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().  since PHP 4
2048 E_STRICT (integer)  Run-time notices. Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.  since PHP 5
 */


